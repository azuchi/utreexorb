require 'spec_helper'

RSpec.describe Utreexo::Forest do

  describe '#add' do
    it 'should be return updated forest' do
      f = Utreexo::Forest.new
      expect(f.num_leaves).to eq(0)
      expect(f.highest_height).to eq(0)

      f.add('a00000aa00000000000000000000000000000000000000000000000000000000')
      expect(f.num_leaves).to eq(1)
      expect(f.acc[0]).to eq('a00000aa00000000000000000000000000000000000000000000000000000000')
      expect(f.highest_height).to eq(1)

      f.add('a00100aa00000000000000000000000000000000000000000000000000000000')
      expect(f.num_leaves).to eq(2)
      expect(f.acc[1]). to eq('736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464')
      expect(f.acc[0]). to be nil
      expect(f.highest_height).to eq(2)

      f.add('a00200aa00000000000000000000000000000000000000000000000000000000')
      expect(f.num_leaves).to eq(3)
      expect(f.acc[1]). to eq('736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464')
      expect(f.acc[0]).to eq('a00200aa00000000000000000000000000000000000000000000000000000000')
      expect(f.highest_height).to eq(2)

      f.add('a00300aa00000000000000000000000000000000000000000000000000000000')
      expect(f.num_leaves).to eq(4)
      expect(f.acc[2]). to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
      expect(f.acc[1]). to be nil
      expect(f.acc[0]).to be nil
      expect(f.highest_height).to eq(3)
    end
  end

  describe '#remove' do
    subject {
      f = Utreexo::Forest.new
      f.add('a00000aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00100aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00200aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00300aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00400aa00000000000000000000000000000000000000000000000000000000')
      f
    }
    context 'remove last elements' do
      it 'should remove element from forest' do
        expect(subject.acc[0]).to eq('a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(subject.acc[1]).to be nil
        expect(subject.acc[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        expect(subject.num_leaves).to eq(5)
        # remove last elements
        proof = Utreexo::Proof.new(4, 'a00400aa00000000000000000000000000000000000000000000000000000000', [])
        subject.remove(proof)
        expect(subject.acc[0]).to be nil
        expect(subject.acc[1]).to be nil
        expect(subject.acc[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        expect(subject.num_leaves).to eq(4)
      end
    end

    context 'remove 3rd element' do
      it 'should remove element from forest' do
        proof = Utreexo::Proof.new(2, 'a00200aa00000000000000000000000000000000000000000000000000000000',
                          ['a00300aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        subject.remove(proof)
        expect(subject.acc[2]).to eq('5fd725b67d4651a8d5153bfea9242322f2d96f152ba3cf9cbce2a7ba694ca0e6')
      end
    end

    context 'remove 4th element' do
      it 'should remove element from forest' do
        proof = Utreexo::Proof.new(3, 'a00300aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00200aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        subject.remove(proof)
        expect(subject.acc[2]).to eq('09a7e3a294b33a5e38086fd9859d698f9082c78481cf39d52eceefc3839b06cc')
      end
    end

    context 'remove with invalid proof' do
      it 'should raise error' do
        proof = Utreexo::Proof.new(0, 'a00300aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00200aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        expect{subject.remove(proof)}.to raise_error(Utreexo::Error, 'The target element does not exist in the forest.')
      end
    end

  end

  describe '#include' do
    subject {
      f = Utreexo::Forest.new
      f.add('a00000aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00100aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00200aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00300aa00000000000000000000000000000000000000000000000000000000')
      f.add('a00400aa00000000000000000000000000000000000000000000000000000000')
      f
    }
    context 'element is root' do
      it 'should return true' do
        proof = Utreexo::Proof.new(4, 'a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(subject.include?(proof)).to be true
      end
    end

    context 'element is not root' do
      it 'should return true' do
        proof = Utreexo::Proof.new(0, 'a00000aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00100aa00000000000000000000000000000000000000000000000000000000', '1a8eb723d8f9067dfb4fee12c723d2a772ffe05b6558186661dc0874061734dd'])
        expect(subject.include?(proof)).to be true

        proof = Utreexo::Proof.new(1, 'a00100aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00000aa00000000000000000000000000000000000000000000000000000000', '1a8eb723d8f9067dfb4fee12c723d2a772ffe05b6558186661dc0874061734dd'])
        expect(subject.include?(proof)).to be true

        proof = Utreexo::Proof.new(2, 'a00200aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00300aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        expect(subject.include?(proof)).to be true

        proof = Utreexo::Proof.new(3, 'a00300aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00200aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        expect(subject.include?(proof)).to be true
      end
    end

    context 'nonexistent element' do
      it 'should return false' do
        proof = Utreexo::Proof.new(3, 'a00200aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00400aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        expect(subject.include?(proof)).to be false

        proof = Utreexo::Proof.new(3, 'a00200aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00300aa00000000000000000000000000000000000000000000000000000000', '136b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        expect(subject.include?(proof)).to be false

        proof = Utreexo::Proof.new(3, 'a00200aa00000000000000000000000000000000000000000000000000000000',
                                   ['a00300aa00000000000000000000000000000000000000000000000000000000'])
        expect(subject.include?(proof)).to be false

        proof = Utreexo::Proof.new(3, 'a00200aa00000000000000000000000000000000000000000000000000000000')
        expect(subject.include?(proof)).to be false
      end
    end
  end

  describe 'tracking proof' do

    context 'add element' do
      it 'should update proof' do
        f = Utreexo::Forest.new
        expect(f.proofs).to be_empty

        f.add('a00000aa00000000000000000000000000000000000000000000000000000000', true)
        proof0 = f.proofs[0]
        expect(proof0.payload).to eq('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(proof0.position).to eq(0)
        expect(proof0.siblings).to be_empty

        f.add('a00100aa00000000000000000000000000000000000000000000000000000000', true)
        expect(proof0.position).to eq(0)
        expect(proof0.siblings).to eq(['a00100aa00000000000000000000000000000000000000000000000000000000'])
        proof1 = f.proofs[1]
        expect(proof1.payload).to eq('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(proof1.position).to eq(1)
        expect(proof1.siblings).to eq(['a00000aa00000000000000000000000000000000000000000000000000000000'])

        f.add('a00200aa00000000000000000000000000000000000000000000000000000000', true)
        expect(proof0.position).to eq(0)
        expect(proof0.siblings).to eq(['a00100aa00000000000000000000000000000000000000000000000000000000'])
        expect(proof1.position).to eq(1)
        expect(proof1.siblings).to eq(['a00000aa00000000000000000000000000000000000000000000000000000000'])
        proof2 = f.proofs[2]
        expect(proof2.position).to eq(2)
        expect(proof2.siblings).to be_empty

        f.add('a00300aa00000000000000000000000000000000000000000000000000000000', true)
        expect(proof0.position).to eq(0)
        expect(proof0.siblings).to eq(['a00100aa00000000000000000000000000000000000000000000000000000000', '1a8eb723d8f9067dfb4fee12c723d2a772ffe05b6558186661dc0874061734dd'])
        expect(proof1.position).to eq(1)
        expect(proof1.siblings).to eq(['a00000aa00000000000000000000000000000000000000000000000000000000', '1a8eb723d8f9067dfb4fee12c723d2a772ffe05b6558186661dc0874061734dd'])
        expect(proof2.position).to eq(2)
        expect(proof2.siblings).to eq(['a00300aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])
        proof3 = f.proofs[3]
        expect(proof3.position).to eq(3)
        expect(proof3.siblings).to eq(['a00200aa00000000000000000000000000000000000000000000000000000000', '736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464'])

        f.add('a00400aa00000000000000000000000000000000000000000000000000000000', true)
        proof4 = f.proofs[4]
        expect(proof4.position).to eq(4)
        expect(proof4.siblings).to be_empty

        f.add('a00500aa00000000000000000000000000000000000000000000000000000000')
        f.add('a00600aa00000000000000000000000000000000000000000000000000000000')
        f.add('a00700aa00000000000000000000000000000000000000000000000000000000', true)

        expect(proof0.siblings).to eq(['a00100aa00000000000000000000000000000000000000000000000000000000', '1a8eb723d8f9067dfb4fee12c723d2a772ffe05b6558186661dc0874061734dd', '7de8ac1fe747dac8bb66446a710bb05f302fb0cb0631aa292dcc28565d13f202'])
        expect(proof4.siblings).to eq(['a00500aa00000000000000000000000000000000000000000000000000000000', '81083b11ca29159545795d9b5cb32f6363fabd1c6a1571a975bcb5a88367416e', '2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0'])

        proof7 = f.proofs[5]
        expect(proof7.position).to eq(7)
        expect(proof7.siblings).to eq(['a00600aa00000000000000000000000000000000000000000000000000000000', 'ec6ce61251d6f58e1e51d27c382dde5544603880ebd0e34a808dca14505df102', '2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0'])
      end
    end

    context 'remove element' do
      it 'should update proof' do
        f = create_forest(2)

        # 2 leaves - 1
        f.remove(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proofs.size).to eq(1)
        expect(f.num_leaves).to eq(1)
        proof0 = f.proof('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(proof0.position).to eq(0)
        expect(proof0.payload).to eq('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(proof0.siblings).to be_empty
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        # 4 leaves - 1
        f.add('a00100aa00000000000000000000000000000000000000000000000000000000', true)
        f.add('a00200aa00000000000000000000000000000000000000000000000000000000', true)
        f.add('a00300aa00000000000000000000000000000000000000000000000000000000', true)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.num_leaves).to eq(3)
        proof0 = f.proof('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(proof0.position).to eq(0)
        expect(proof0.payload).to eq('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(proof0.siblings).to eq(['a00100aa00000000000000000000000000000000000000000000000000000000'])
        proof1 = f.proof('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(proof1.payload).to eq('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(proof1.siblings).to eq(['a00000aa00000000000000000000000000000000000000000000000000000000'])
        proof2 = f.proof('a00300aa00000000000000000000000000000000000000000000000000000000')
        expect(proof2.payload).to eq('a00300aa00000000000000000000000000000000000000000000000000000000')
        expect(proof2.siblings).to be_empty
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        # remove last tree
        f = create_forest(9)
        f.remove(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.acc[3]).to eq('f0934190042e2647f754c846be977c60124afbe4cda121c6c08466983e92aba0')
        p0 = f.proof('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(p0.position).to eq(0)
        expect(p0.siblings[2]).to eq('a9ba3db089de485fcfbdb020baede5a4e06bc662074ec331ae26a15b305f282a')
        p1 = f.proof('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(p1.position).to eq(1)
        expect(p1.siblings[2]).to eq('a9ba3db089de485fcfbdb020baede5a4e06bc662074ec331ae26a15b305f282a')
        p2 = f.proof('a00200aa00000000000000000000000000000000000000000000000000000000')
        expect(p2.position).to eq(2)
        expect(p2.siblings[2]).to eq('a9ba3db089de485fcfbdb020baede5a4e06bc662074ec331ae26a15b305f282a')
        p3 = f.proof('a00300aa00000000000000000000000000000000000000000000000000000000')
        expect(p3.position).to eq(3)
        expect(p3.siblings[2]).to eq('a9ba3db089de485fcfbdb020baede5a4e06bc662074ec331ae26a15b305f282a')
        p4 = f.proof('a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(p4.position).to eq(4)
        expect(p4.siblings[0]).to eq('a00800aa00000000000000000000000000000000000000000000000000000000')
        expect(p4.siblings[1]).to eq('81083b11ca29159545795d9b5cb32f6363fabd1c6a1571a975bcb5a88367416e')
        expect(p4.siblings[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        p5 = f.proof('a00800aa00000000000000000000000000000000000000000000000000000000')
        expect(p5.position).to eq(5)
        expect(p5.siblings[0]).to eq('a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(p5.siblings[1]).to eq('81083b11ca29159545795d9b5cb32f6363fabd1c6a1571a975bcb5a88367416e')
        expect(p5.siblings[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        p6 = f.proof('a00600aa00000000000000000000000000000000000000000000000000000000')
        expect(p6.position).to eq(6)
        expect(p6.siblings[1]).to eq('23bea75248880feaa7542bf908b8e00267f25161ed39e5394f19592875fa31ee')
        expect(p6.siblings[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        p7 = f.proof('a00700aa00000000000000000000000000000000000000000000000000000000')
        expect(p7.position).to eq(7)
        expect(p7.siblings[1]).to eq('23bea75248880feaa7542bf908b8e00267f25161ed39e5394f19592875fa31ee')
        expect(p7.siblings[2]).to eq('2d043522d1fc5adfa966a889492acc8b4f924869e18192ad6f4bcb30db6d56c0')
        f.proofs.each {|p|expect(f.include?(p)).to be true}
      end
    end

    context 'remove with switch case' do
      it 'should be switch position' do
        # switch last element
        f = create_forest(5)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.acc[2]).to eq('5fd725b67d4651a8d5153bfea9242322f2d96f152ba3cf9cbce2a7ba694ca0e6')
        p4 = f.proof('a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(p4.position).to eq(2)
        expect(p4.siblings[0]).to eq('a00300aa00000000000000000000000000000000000000000000000000000000')
        expect(p4.siblings[1]).to eq('736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464')
        p0 = f.proof('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(p0.position).to eq(0)
        expect(p0.siblings[0]).to eq('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(p0.siblings[1]).to eq('7ac618c7295f4c87374767d8ba5ee463f90e24c78ca9226d47011fb6ea43d7e2')
        p1 = f.proof('a00100aa00000000000000000000000000000000000000000000000000000000')
        expect(p1.position).to eq(1)
        expect(p1.siblings[0]).to eq('a00000aa00000000000000000000000000000000000000000000000000000000')
        expect(p1.siblings[1]).to eq('7ac618c7295f4c87374767d8ba5ee463f90e24c78ca9226d47011fb6ea43d7e2')
        p3 = f.proof('a00300aa00000000000000000000000000000000000000000000000000000000')
        expect(p3.position).to eq(3)
        expect(p3.siblings[0]).to eq('a00400aa00000000000000000000000000000000000000000000000000000000')
        expect(p3.siblings[1]).to eq('736b3e12120637186a0a8eef8ce45ed69b39119182cc749b793f05de3996f464')
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        # switch height 1 tree
        f = create_forest(10)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.acc[3]).to eq('ac89f21c77322c683bd03b942e932d078a0d55aec05112674b10e24016138e6c')
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00800aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00900aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(7)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(8)

        # switch height 2 tree
        f = create_forest(12)
        f.remove(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00800aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00900aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00a00aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        expect(f.proof('a00b00aa00000000000000000000000000000000000000000000000000000000').position).to eq(7)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(8)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(9)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(10)

        f = create_forest(14)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00c00aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00d00aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(7)
        expect(f.proof('a00800aa00000000000000000000000000000000000000000000000000000000').position).to eq(8)
        expect(f.proof('a00900aa00000000000000000000000000000000000000000000000000000000').position).to eq(9)
        expect(f.proof('a00a00aa00000000000000000000000000000000000000000000000000000000').position).to eq(10)
        expect(f.proof('a00b00aa00000000000000000000000000000000000000000000000000000000').position).to eq(11)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(12)

        f = create_forest(20)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').siblings[3]).to eq('3d2cda3aec3e5befbfda974f46497dbc6d60aef18eacad67db7c11c085ba67be')
        expect(f.proof('a00800aa00000000000000000000000000000000000000000000000000000000').siblings[3]).to eq('64a19b60b4847799d4d93c177873ce9c756f7f1fa9c62ca9df279bbd8abb0a69')
        expect(f.proof('a00f00aa00000000000000000000000000000000000000000000000000000000').siblings[3]).to eq('64a19b60b4847799d4d93c177873ce9c756f7f1fa9c62ca9df279bbd8abb0a69')

        f = create_forest(10)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').siblings[2]).to eq('92fb45386bc452b157baf40f647c0ceab33473c1ff5b734e642ec309b41178cf')

        f = create_forest(24)
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(16)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(17)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(18)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(19)
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(20)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(21)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(22)
      end
    end

    context '8 leaves' do
      it 'should be update proof position' do
        f = eight_forest
        f.remove(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = eight_forest
        f.remove(f.proof('a00600aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(0)
        expect(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00200aa00000000000000000000000000000000000000000000000000000000').position).to eq(2)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(3)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00500aa00000000000000000000000000000000000000000000000000000000').position).to eq(5)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(6)
        f.proofs.each {|p|expect(f.include?(p)).to be true}

        f = create_forest(16, [2,5,6,8,10,11,13, 14,15])
        f.remove(f.proof('a00100aa00000000000000000000000000000000000000000000000000000000'))
        expect(f.proof('a00900aa00000000000000000000000000000000000000000000000000000000').position).to eq(1)
        expect(f.proof('a00c00aa00000000000000000000000000000000000000000000000000000000').position).to eq(4)
        expect(f.proof('a00400aa00000000000000000000000000000000000000000000000000000000').position).to eq(8)
        expect(f.proof('a00700aa00000000000000000000000000000000000000000000000000000000').position).to eq(11)
        expect(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000').position).to eq(13)
        expect(f.proof('a00000aa00000000000000000000000000000000000000000000000000000000').position).to eq(14)
        f.proofs.each {|p|expect(f.include?(p)).to be true}
      end
    end

    context 'remove with not all tracking' do
      it 'should be update inclusion proof' do
        f = create_forest(16, [4, 5, 6, 7, 8, 9, 10, 11])
        f.remove(f.proof('a00300aa00000000000000000000000000000000000000000000000000000000'))
        f.proofs.each {|p|expect(f.include?(p)).to be true}
      end
    end
  end

  describe '#tree_heigh' do
    it 'should return tree height' do
      f = create_forest(23)
      expect(f.send(:tree_height, 2)).to eq(4)
      expect(f.send(:tree_height, 16)).to eq(2)
      expect(f.send(:tree_height, 20)).to eq(1)
      expect(f.send(:tree_height, 22)).to eq(0)
    end
  end

  describe '2fwd1back' do
    it 'should be passed.'do
      f = Utreexo::Forest.new
      absidx = 0
      adds= [['00' * 32].pack('H*'), ['00' * 32].pack('H*')]
      100.times do |i|
        adds.each_with_index do |a, j|
          a[0] = [((absidx >> 8) | 0xa0).to_s(16).rjust(2, '0')].pack('H*')
          a[1] = [absidx.to_s(16).rjust(2, '0')].pack('H*')
          a[3] = ['aa'].pack('H*')
          f.add(a.unpack('H*').first, true)
          absidx += 1
        end

        p = f.proof(adds[0].unpack('H*').first)

        # remove first
        f.remove(p)

        # get proof for the 2nd
        p = f.proof(adds[1].unpack('H*').first)
        expect(f.include?(p)).to be true
      end
    end
  end

  def eight_forest
    create_forest(8)
  end

  def create_forest(size, not_tracking_indexes = [])
    f = Utreexo::Forest.new
    size.times.with_index do |i|
      element = "a0#{i.to_s(16).rjust(2, '0')}00aa00000000000000000000000000000000000000000000000000000000"
      f.add(element, !not_tracking_indexes.include?(i))
    end
    f
  end

end